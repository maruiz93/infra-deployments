---
# simplified Loki configuration for staging
deploymentMode: Distributed

 # This exposes the Loki gateway so it can be written to and queried externaly
gateway:
  service:
    type: LoadBalancer
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      memory: 256Mi

# Service Account configuration to use IAM role for S3 access
serviceAccount:
  create: false
  name: loki-sa

# Disable canary
lokiCanary:
  enabled: false

# Single binary configuration with proper volume mounts
singleBinary:
  replicas: 0

# Basic Loki configuration with S3 storage
loki:
  commonConfig:
    replication_factor: 3
    path_prefix: /var/loki  # This directory will be writable via volume mount
  schemaConfig:
    configs:
      - from: "2024-04-01"
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: loki_index_
          period: 24h
  # Configure ingestion limits to handle Vector's data volume
  limits_config:
      retention_period: 744h  # 31 days retention
      ingestion_rate_mb: 20
      ingestion_burst_size_mb: 40
      max_streams_per_user: 0
      max_line_size: 256000
      reject_old_samples: false
      reject_old_samples_max_age: 168h
      discover_service_name: []
      allow_structured_metadata: true
      volume_enabled: true
      max_global_streams_per_user: 50000
  # Tuning for high-load queries
  querier:
    max_concurrent: 8
  query_range:
    split_queries_by_interval: 24h
    parallelise_shardable_queries: true
  # Ingester chunking behavior
  ingester:
    chunk_target_size: 1536000
    chunk_idle_period: 1m
    max_chunk_age: 1h
  # Required storage configuration for Helm chart
  storage:
    type: s3
    bucketNames:
      chunks: stone-stg-rh01-loki-storage
      ruler: stone-stg-rh01-loki-storage
      admin: stone-stg-rh01-loki-storage
    s3:
      endpoint: https://s3.us-east-1.amazonaws.com
      region: us-east-1
  # Required storage_config for Helm chart (chunks on S3)
  storage_config:
    aws:
      s3: s3://stone-stg-rh01-loki-storage
      s3forcepathstyle: true
      bucketnames: stone-stg-rh01-loki-storage
      region: us-east-1
  # Configure ruler storage to use local filesystem
  ruler:
    rule_path: /var/loki/ruler
    storage:
      type: local
      local:
        directory: /var/loki/ruler
  # Configure compactor to use writable volume for working directory
  compactor:
    working_directory: /var/loki/compactor

# Security contexts for OpenShift
podSecurityContext:
  runAsNonRoot: false
  allowPrivilegeEscalation: false

containerSecurityContext:
  runAsNonRoot: false
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true  # Keep read-only root filesystem for security

# Disable test pods
test:
  enabled: false

# Disable sidecar completely to avoid loki-sc-rules container
sidecar:
  rules:
    enabled: false
  datasources:
    enabled: false

# Enable Memcached caches for performance
chunksCache:
  enabled: true
  replicas: 1

resultsCache:
  enabled: true
  replicas: 1

memcached:
  enabled: true

memcachedResults:
  enabled: true

memcachedChunks:
  enabled: true

memcachedFrontend:
  enabled: true

memcachedIndexQueries:
  enabled: true

memcachedIndexWrites:
  enabled: true

# Zero out replica counts of other deployment modes
backend:
  replicas: 0
read:
  replicas: 0
write:
  replicas: 0

# Distributed components configuration
ingester:
  replicas: 3
  autoscaling:
    enabled: true
  zoneAwareReplication:
    enabled: true
  maxUnavailable: 1
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      memory: 2Gi
  persistence:
    enabled: true
    size: 10Gi
  affinity: {}
  podAntiAffinity:
    soft: {}
    hard: {}

querier:
  replicas: 3
  autoscaling:
    enabled: true
  maxUnavailable: 1
  resources:
    requests:
      cpu: 300m
      memory: 512Mi
    limits:
      memory: 1Gi
  affinity: {}

queryFrontend:
  replicas: 2
  maxUnavailable: 1
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      memory: 512Mi

queryScheduler:
  replicas: 2
  maxUnavailable: 1
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      memory: 512Mi

distributor:
  replicas: 3
  autoscaling:
    enabled: true
  maxUnavailable: 1
  resources:
    requests:
      cpu: 300m
      memory: 512Mi
    limits:
      memory: 1Gi
  affinity: {}

compactor:
  replicas: 1
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      memory: 1Gi

indexGateway:
  replicas: 2
  maxUnavailable: 0
  resources:
    requests:
      cpu: 300m
      memory: 512Mi
    limits:
      memory: 1Gi
  affinity: {}

ruler:
  replicas: 1
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      memory: 512Mi

bloomPlanner:
  replicas: 0
bloomBuilder:
  replicas: 0
bloomGateway:
  replicas: 0

# Resources for memcached exporter to satisfy linter
memcachedExporter:
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      memory: 128Mi
